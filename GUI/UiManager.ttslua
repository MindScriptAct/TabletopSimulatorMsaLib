local UiManager = {} -- the table representing the class, which will double as the metatable for the instances
UiManager.__index = UiManager -- failed table lookups on the instances should fallback to the class table, to get methods

setmetatable(UiManager, {
  __call = function (cls, defaultAttachObject) return cls.New(defaultAttachObject) end
})

-- Meta class
--local UiManager = {
--  defaultAttachObject = nil,
--  _buttonStyleLibrary = nil -- private
--}

-- Derived class method new

function UiManager:New(defaultAttachObject)
  local self = setmetatable({}, UiManager)

  self.defaultAttachObject = Global;
  if defaultAttachObject ~= nil then self.defaultAttachObject = defaultAttachObject; end
  self._buttonStyleLibrary = {
     default = self.CloneButtonTable()
  };
  self.test = 123
  return self
end

-- Derived class method printArea

function UiManager:CreateButton(attachTo, label, functionName, functionObject)
  if attachTo == nil then PrintError("button attachTo can't be nil. (Send object or objectId)"); return; end

  if (type(attachTo) == 'string') then
    attachTo = GetObject(attachTo)
  end

print(self)
print(attachTo)
print(functionName)
print(functionObject)
print(self._buttonStyleLibrary)
print(self.defaultAttachObject)
print(self._buttonStyleLibrary['default'].position[0])
print(self.test)
  --

  --local allButtons = attachTo.getButtons()
  --PrintObject("buttons", allButtons)



  --return Button(attachTo, self._buttonStyleLibrary['default'])
end

function UiManager:AddButtonStyle(styleName, style)
  _buttonStyleLibrary[styleName] = style;
end

function UiManager.CloneButtonTable()
  local buttonTable = {
    label = "[Button]",
    function_owner = Global,
    click_function = "printHello",
    font_size = 100,
    width = 100,
    height = 100,
    position = {0, 0, 0},
    rotation = {0, 0, 0},
    scale = {1, 1, 1},
    color = {1, 1, 1},
    font_color = {0, 0, 0},
    hover_color = nil,
    press_color = nil,
    tooltip = nil
  };
  return buttonTable;
end
