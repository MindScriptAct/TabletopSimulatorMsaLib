local Button = {} -- the table representing the class, which will double as the metatable for the instances
Button.__index = Button -- failed table lookups on the instances should fallback to the class table, to get methods

setmetatable(Button, {
  __call = function (cls, attachedObject, styleTable) return cls.New(attachedObject, styleTable) end
})

-- Meta class
--local Button = {
--  _attachedObject = nil,
--  _buttonPosition = nil
--}
--Button.__index = Button
-- Derived class method new

function Button:New(attachedObject, styleTable)
   local self = setmetatable({}, Button)
   self._attachedObject = attachedObject;
   if attachedObject == nil then PrintError("button attachedObject can't be nil."); return nil; end
   if styleTable == nil then PrintError("button styleTable can't be nil."); return nil; end

   self._attachedObject = attachedObject;
   self._buttonPosition = styleTable.position;

   self._attachedObject.createButton(styleTable)
   return self
end


function Button:DoStuff()
   print("Do button stuff")
end


function Button:SetLabel(label)
  _TempButtonInfo.label = label;
  return self;
end

function Button:SetFunctionOwner(functionOwner)
  _TempButtonInfo.function_owner = functionOwner;
  return self;
end

function Button:SetClickFunction(clickFunction)
  _TempButtonInfo.click_function = clickFunction;
  return self;
end

function Button:SetFontSize(fontSize)
  _TempButtonInfo.font_size = fontSize;
  return self;
end

function Button:SetWidth( width)
  _TempButtonInfo.width = width;
  return self;
end

function Button:SetHeight(height)
  _TempButtonInfo.height = height;
  return self;
end

function Button:Resize(width, height)
  _TempButtonInfo.width = width;
  _TempButtonInfo.height = height;
  return self;
end

function Button:Move(x, y, z)
  _TempButtonInfo.position.x = x;
  _TempButtonInfo.position.y = y;
  _TempButtonInfo.position.z = z;
  return self;
end

function Button:Rotate(x, y, z)
  _TempButtonInfo.rotation.x = x;
  _TempButtonInfo.rotation.y = y;
  _TempButtonInfo.rotation.z = z;
  return self;
end

function Button:Scale(x, y, z, index)
  --_TempButtonInfo.scale.x = x;
 --_TempButtonInfo.scale.y = y;
  --_TempButtonInfo.scale.z = z;
  local parameters = {
    index = index,
    scale = {x, y, z}
  }

print(self);
print(self._attachedObject);
  --self._attachedObject.editButton(parameters);
  return self;
end

function Button:SetColor(r, g, b)
  _TempButtonInfo.color.r = r;
  _TempButtonInfo.color.g = g;
  _TempButtonInfo.color.b = b;
  return self;
end

function Button:SetHoverColor(r, g, b)
  _TempButtonInfo.hover_color.r = r;
  _TempButtonInfo.hover_color.g = g;
  _TempButtonInfo.hover_color.b = b;
  return self;
end

function Button:SetPressColor(r, g, b)
  _TempButtonInfo.press_color.r = r;
  _TempButtonInfo.press_color.g = g;
  _TempButtonInfo.press_color.b = b;
  return self;
end

function Button:SetTooltip(tooltip)
  _TempButtonInfo.tooltip = tooltip;
  return self;
end
